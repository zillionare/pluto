import datetime
import os
import unittest
from unittest import mock

import cfg4py
import numpy as np
import omicron
from coretypes import FrameType
from omicron import tf
from omicron.models.stock import Stock
from omicron.talib import moving_average

from pluto.core.metrics import (
    adjust_close_at_pv,
    convex_score,
    convex_signal,
    evaluate,
    high_upper_lead,
    hrsi_upline_confirm,
    last_wave,
    parallel_score,
    plot_evaluate,
    short_signal,
    vanilla_score,
)


class MetricsTest(unittest.IsolatedAsyncioTestCase):
    async def asyncSetUp(self):
        cfg4py.init(os.path.expanduser("~/zillionare/pluto"))
        os.environ["all_proxy"] = ""
        await omicron.init()

    async def asyncTearDown(self) -> None:
        await omicron.close()
        return await super().asyncTearDown()

    async def test_vanilla_score(self):
        # 类型一：日线，检测当日未涨停
        code = "002380.XSHE"
        bars = np.array(
            [
                (
                    "2022-07-15T00:00:00",
                    12.49,
                    12.56,
                    12.2,
                    12.2,
                    8024077.0,
                    9.89049220e07,
                    3.353773,
                ),
                (
                    "2022-07-18T00:00:00",
                    12.58,
                    12.96,
                    12.46,
                    12.8,
                    10895999.0,
                    1.39033790e08,
                    3.353773,
                ),
                (
                    "2022-07-19T00:00:00",
                    12.87,
                    13.34,
                    12.65,
                    13.23,
                    16645821.0,
                    2.17165421e08,
                    3.353773,
                ),
                (
                    "2022-07-20T00:00:00",
                    13.28,
                    13.28,
                    12.9,
                    13.04,
                    9927421.0,
                    1.29080920e08,
                    3.353773,
                ),
            ],
            dtype=[
                ("frame", "<M8[s]"),
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )
        with mock.patch(
            "omicron.models.stock.Stock.trade_price_limit_flags",
            return_value=([False], [False]),
        ):
            actual = await vanilla_score(bars, code, frametype=FrameType.DAY)
            exp = ([0.04918036, 0.08442621, 0.06885247], [0.08442621], [])
            for i in range(3):
                np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型二： 日线，检测当日涨停
        code = "002380.XSHE"
        bars = np.array(
            [
                (
                    "2022-06-09T00:00:00",
                    13.35,
                    13.35,
                    13.01,
                    13.35,
                    8613404.0,
                    1.14910770e08,
                    3.342714,
                ),
                (
                    "2022-06-10T00:00:00",
                    14.17,
                    14.69,
                    13.97,
                    14.69,
                    16849817.0,
                    2.43503344e08,
                    3.342714,
                ),
                (
                    "2022-06-13T00:00:00",
                    15.0,
                    16.16,
                    14.81,
                    16.16,
                    25108534.0,
                    3.92079273e08,
                    3.342714,
                ),
                (
                    "2022-06-14T00:00:00",
                    16.65,
                    17.37,
                    15.0,
                    16.24,
                    41124181.0,
                    6.74687061e08,
                    3.342714,
                ),
            ],
            dtype=[
                ("frame", "<M8[s]"),
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )
        with mock.patch(
            "omicron.models.stock.Stock.trade_price_limit_flags",
            return_value=([True], [False]),
        ):
            actual = await vanilla_score(bars, code, frametype=FrameType.DAY)
            exp = ([0.14043753, 0.14608325], [0.14608325], [])
            for i in range(3):
                np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型三： 30分钟线，检测时未涨停
        code = "002380.XSHE"
        with mock.patch(
            "omicron.tf.day_shift",
            side_effect=(datetime.date(2022, 7, 13), datetime.date(2022, 7, 14)),
        ):
            with mock.patch(
                "omicron.models.stock.Stock.get_trade_price_limits",
                side_effect=(
                    [(datetime.date(2022, 7, 13), 1.3, 10.88)],
                    [(datetime.date(2022, 7, 14), 13.67, 11.19)],
                ),
            ):
                bars = np.array(
                    [
                        (
                            "2022-07-13T11:30:00",
                            12.32,
                            12.44,
                            12.31,
                            12.39,
                            802700.0,
                            9939067.0,
                            3.353773,
                        ),
                        (
                            "2022-07-13T13:30:00",
                            12.4,
                            12.5,
                            12.33,
                            12.47,
                            1043900.0,
                            12983265.0,
                            3.353773,
                        ),
                        (
                            "2022-07-13T14:00:00",
                            12.47,
                            12.48,
                            12.42,
                            12.43,
                            514900.0,
                            6408176.0,
                            3.353773,
                        ),
                        (
                            "2022-07-13T14:30:00",
                            12.43,
                            12.6,
                            12.41,
                            12.45,
                            1136100.0,
                            14198468.0,
                            3.353773,
                        ),
                        (
                            "2022-07-13T15:00:00",
                            12.45,
                            12.48,
                            12.42,
                            12.43,
                            1003400.0,
                            12485592.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T10:00:00",
                            12.52,
                            13.14,
                            12.46,
                            12.92,
                            5904300.0,
                            75851763.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T10:30:00",
                            12.93,
                            12.94,
                            12.8,
                            12.86,
                            1535000.0,
                            19753274.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T11:00:00",
                            12.87,
                            12.87,
                            12.77,
                            12.84,
                            551700.0,
                            7073972.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T11:30:00",
                            12.85,
                            12.86,
                            12.79,
                            12.82,
                            271000.0,
                            3475846.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T13:30:00",
                            12.83,
                            12.84,
                            12.77,
                            12.82,
                            493700.0,
                            6318695.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T14:00:00",
                            12.82,
                            12.82,
                            12.74,
                            12.77,
                            491000.0,
                            6277095.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T14:30:00",
                            12.77,
                            12.78,
                            12.58,
                            12.64,
                            786700.0,
                            9967807.0,
                            3.353773,
                        ),
                        (
                            "2022-07-14T15:00:00",
                            12.65,
                            12.69,
                            12.61,
                            12.65,
                            1007200.0,
                            12750028.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T10:00:00",
                            12.49,
                            12.56,
                            12.34,
                            12.4,
                            2545600.0,
                            31630911.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T10:30:00",
                            12.41,
                            12.44,
                            12.31,
                            12.32,
                            1053400.0,
                            13012812.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T11:00:00",
                            12.31,
                            12.34,
                            12.26,
                            12.28,
                            888500.0,
                            10924709.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T11:30:00",
                            12.3,
                            12.32,
                            12.2,
                            12.31,
                            714900.0,
                            8761878.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T13:30:00",
                            12.32,
                            12.32,
                            12.24,
                            12.29,
                            476700.0,
                            5850614.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T14:00:00",
                            12.29,
                            12.3,
                            12.22,
                            12.28,
                            627800.0,
                            7698980.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T14:30:00",
                            12.28,
                            12.29,
                            12.23,
                            12.26,
                            548200.0,
                            6722689.0,
                            3.353773,
                        ),
                        (
                            "2022-07-15T15:00:00",
                            12.25,
                            12.33,
                            12.2,
                            12.2,
                            1169000.0,
                            14302329.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T10:00:00",
                            12.58,
                            12.95,
                            12.46,
                            12.78,
                            5389600.0,
                            68732486.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T10:30:00",
                            12.78,
                            12.88,
                            12.66,
                            12.66,
                            1206900.0,
                            15399565.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T11:00:00",
                            12.67,
                            12.73,
                            12.64,
                            12.69,
                            439500.0,
                            5580426.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T11:30:00",
                            12.69,
                            12.74,
                            12.68,
                            12.72,
                            295200.0,
                            3751783.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T13:30:00",
                            12.72,
                            12.79,
                            12.68,
                            12.7,
                            471000.0,
                            5996444.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T14:00:00",
                            12.7,
                            12.8,
                            12.68,
                            12.79,
                            529300.0,
                            6739336.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T14:30:00",
                            12.78,
                            12.86,
                            12.72,
                            12.84,
                            928200.0,
                            11859515.0,
                            3.353773,
                        ),
                        (
                            "2022-07-18T15:00:00",
                            12.83,
                            12.86,
                            12.78,
                            12.8,
                            1636300.0,
                            20974235.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T10:00:00",
                            12.87,
                            13.0,
                            12.65,
                            12.92,
                            4197600.0,
                            54163142.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T10:30:00",
                            12.92,
                            12.96,
                            12.8,
                            12.84,
                            1291000.0,
                            16597255.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T11:00:00",
                            12.83,
                            13.14,
                            12.82,
                            13.04,
                            2625800.0,
                            34222092.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T11:30:00",
                            13.04,
                            13.13,
                            13.01,
                            13.04,
                            1150200.0,
                            15051945.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T13:30:00",
                            13.05,
                            13.07,
                            12.94,
                            13.0,
                            983000.0,
                            12781171.0,
                            3.353773,
                        ),
                        (
                            "2022-07-19T14:00:00",
                            13.01,
                            13.31,
                            12.99,
                            13.17,
                            2679800.0,
                            35262736.0,
                            3.353773,
                        ),
                    ],
                    dtype=[
                        ("frame", "<M8[s]"),
                        ("open", "<f4"),
                        ("high", "<f4"),
                        ("low", "<f4"),
                        ("close", "<f4"),
                        ("volume", "<f8"),
                        ("amount", "<f8"),
                        ("factor", "<f4"),
                    ],
                )

                actual = await vanilla_score(bars, code, frametype=FrameType.MIN30)
                exp = (
                    [0.02098461, -0.01533499, 0.03309119],
                    [0.03309119],
                    [-0.01533499],
                )
                for i in range(3):
                    np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型四： 30分钟线，检测时涨停
        with mock.patch(
            "omicron.models.stock.Stock.get_trade_price_limits",
            side_effect=(
                [(datetime.date(2022, 10, 10), 14.32, 11.72)],
                [(datetime.date(2022, 10, 11), 15.75, 12.89)],
            ),
        ):
            with mock.patch(
                "omicron.tf.day_shift",
                side_effect=(datetime.date(2022, 10, 10), datetime.date(2022, 10, 11)),
            ):
                bars_ = np.array(
                    [
                        (
                            "2022-10-10T10:00:00",
                            13.37,
                            14.32,
                            13.24,
                            14.32,
                            6187400.0,
                            8.63085590e07,
                            3.353773,
                        ),
                        (
                            "2022-10-10T10:30:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            305700.0,
                            4.37762400e06,
                            3.353773,
                        ),
                        (
                            "2022-10-10T11:00:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            99200.0,
                            1.42054400e06,
                            3.353773,
                        ),
                        (
                            "2022-10-10T11:30:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            43000.0,
                            6.15760000e05,
                            3.353773,
                        ),
                        (
                            "2022-10-10T13:30:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            100900.0,
                            1.44488800e06,
                            3.353773,
                        ),
                        (
                            "2022-10-10T14:00:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            99700.0,
                            1.42770400e06,
                            3.353773,
                        ),
                        (
                            "2022-10-10T14:30:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            268100.0,
                            3.83919200e06,
                            3.353773,
                        ),
                        (
                            "2022-10-10T15:00:00",
                            14.32,
                            14.32,
                            14.32,
                            14.32,
                            571600.0,
                            8.18501100e06,
                            3.353773,
                        ),
                        (
                            "2022-10-11T10:00:00",
                            14.9,
                            15.17,
                            14.52,
                            14.65,
                            8425400.0,
                            1.24763053e08,
                            3.353773,
                        ),
                        (
                            "2022-10-11T10:30:00",
                            14.66,
                            15.0,
                            14.64,
                            14.69,
                            3357700.0,
                            4.96986620e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T11:00:00",
                            14.66,
                            14.9,
                            14.54,
                            14.73,
                            1965200.0,
                            2.89275330e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T11:30:00",
                            14.74,
                            15.75,
                            14.6,
                            15.75,
                            4985200.0,
                            7.65381320e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T13:30:00",
                            15.75,
                            15.75,
                            15.75,
                            15.75,
                            1041800.0,
                            1.64083500e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T14:00:00",
                            15.75,
                            15.75,
                            15.75,
                            15.75,
                            1466900.0,
                            2.31039740e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T14:30:00",
                            15.75,
                            15.75,
                            15.75,
                            15.75,
                            1537700.0,
                            2.42187750e07,
                            3.353773,
                        ),
                        (
                            "2022-10-11T15:00:00",
                            15.75,
                            15.75,
                            15.75,
                            15.75,
                            345400.0,
                            5.44005000e06,
                            3.353773,
                        ),
                        (
                            "2022-10-12T10:00:00",
                            16.18,
                            16.47,
                            15.51,
                            15.86,
                            19099600.0,
                            3.06769935e08,
                            3.353773,
                        ),
                        (
                            "2022-10-12T10:30:00",
                            15.88,
                            17.0,
                            15.76,
                            16.8,
                            7086500.0,
                            1.16071283e08,
                            3.353773,
                        ),
                        (
                            "2022-10-12T11:00:00",
                            16.81,
                            16.88,
                            16.31,
                            16.42,
                            2614400.0,
                            4.33098160e07,
                            3.353773,
                        ),
                        (
                            "2022-10-12T11:30:00",
                            16.42,
                            16.49,
                            16.23,
                            16.27,
                            905100.0,
                            1.48070050e07,
                            3.353773,
                        ),
                        (
                            "2022-10-12T13:30:00",
                            16.25,
                            16.25,
                            15.8,
                            16.0,
                            1400400.0,
                            2.24104100e07,
                            3.353773,
                        ),
                        (
                            "2022-10-12T14:00:00",
                            16.0,
                            17.33,
                            15.9,
                            17.33,
                            5134700.0,
                            8.75839460e07,
                            3.353773,
                        ),
                        (
                            "2022-10-12T14:30:00",
                            17.33,
                            17.33,
                            17.33,
                            17.33,
                            526400.0,
                            9.12261600e06,
                            3.353773,
                        ),
                        (
                            "2022-10-12T15:00:00",
                            17.33,
                            17.33,
                            17.33,
                            17.33,
                            376500.0,
                            6.52474500e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T10:00:00",
                            17.6,
                            19.06,
                            17.58,
                            19.06,
                            22189100.0,
                            4.07764112e08,
                            3.353773,
                        ),
                        (
                            "2022-10-13T10:30:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            1835000.0,
                            3.49755380e07,
                            3.353773,
                        ),
                        (
                            "2022-10-13T11:00:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            256400.0,
                            4.88698400e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T11:30:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            140100.0,
                            2.66981100e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T13:30:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            181200.0,
                            3.45367200e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T14:00:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            91900.0,
                            1.75174700e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T14:30:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            111300.0,
                            2.12137800e06,
                            3.353773,
                        ),
                        (
                            "2022-10-13T15:00:00",
                            19.06,
                            19.06,
                            19.06,
                            19.06,
                            301000.0,
                            5.73713600e06,
                            3.353773,
                        ),
                        (
                            "2022-10-14T10:00:00",
                            20.06,
                            20.97,
                            19.34,
                            20.01,
                            30942993.0,
                            6.31107987e08,
                            3.353773,
                        ),
                        (
                            "2022-10-14T10:30:00",
                            20.01,
                            20.17,
                            19.58,
                            19.96,
                            3284219.0,
                            6.53043860e07,
                            3.353773,
                        ),
                        (
                            "2022-10-14T11:00:00",
                            19.97,
                            20.86,
                            19.81,
                            20.75,
                            3359457.0,
                            6.85313790e07,
                            3.353773,
                        ),
                        (
                            "2022-10-14T11:30:00",
                            19.67,
                            19.67,
                            19.63,
                            19.63,
                            105000.0,
                            2.06305400e06,
                            3.353773,
                        ),
                        (
                            "2022-10-14T13:30:00",
                            19.7,
                            20.73,
                            19.65,
                            20.51,
                            3051158.0,
                            6.10360510e07,
                            3.353773,
                        ),
                        (
                            "2022-10-14T14:00:00",
                            20.51,
                            20.51,
                            19.71,
                            19.78,
                            1736700.0,
                            3.48235070e07,
                            3.353773,
                        ),
                        (
                            "2022-10-14T14:30:00",
                            19.76,
                            19.93,
                            19.67,
                            19.68,
                            2321508.0,
                            4.58501780e07,
                            3.353773,
                        ),
                        (
                            "2022-10-14T15:00:00",
                            18.01,
                            18.01,
                            18.01,
                            18.01,
                            1274600.0,
                            2.29555460e07,
                            3.353773,
                        ),
                    ],
                    dtype=[
                        ("frame", "<M8[s]"),
                        ("open", "<f4"),
                        ("high", "<f4"),
                        ("low", "<f4"),
                        ("close", "<f4"),
                        ("volume", "<f8"),
                        ("amount", "<f8"),
                        ("factor", "<f4"),
                    ],
                )
                actual = await vanilla_score(bars_, code, frametype=FrameType.MIN30)
                exp = ([0.16308728, 0.27919462, 0.20872487], [0.27919462], [])
                for i in range(3):
                    np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

    def test_parallel_score(self):
        mas = [1, 1.1, 1.2, 1.3, 1.4]
        self.assertEqual(0, parallel_score(mas))

        mas = [1.4, 1.3, 1.2, 1.1, 1]
        self.assertEqual(1, parallel_score(mas))

        mas = [1.4, 1.3, 1.1, 1.2, 1]
        self.assertAlmostEqual(0.9, parallel_score(mas))

    async def test_adjust_close_with_pv(self):
        bars = await Stock.get_bars(
            "002782.XSHE", 70, FrameType.MIN30, end=datetime.datetime(2022, 11, 24, 15)
        )

        low, high, pvs = adjust_close_at_pv(bars, 0)
        # fmt: off
        low_exp = np.array([
                18.81, 18.62, 18.59, 18.38, 18.49, 18.46, 18.89, 18.93, 19.08,
                19.09, 19.16, 19.07, 19.2 , 19.35, 19.  , 19.09, 18.75, 18.95,
                18.91, 18.98, 18.84, 18.85, 18.3 , 18.2 , 18.3 , 18.06, 18.09,
                18.14, 18.19, 18.21, 18.45, 18.39, 18.32, 18.19, 17.91, 17.75,
                17.75, 17.69, 17.5 , 18.27, 18.48, 18.92, 19.46, 19.46, 19.46,
                19.46, 19.36, 19.17, 19.6 , 19.57, 19.48, 19.21, 19.43, 19.34,
                18.86, 18.45, 19.17, 19.16, 19.27, 19.44, 19.47, 19.59, 19.4 ,
                19.48, 19.39, 19.31, 19.16, 19.37, 19.29, 19.28
            ],
            dtype=np.float32)
        high_exp = np.array([
                18.95, 18.62, 18.59, 18.42, 18.49, 18.46, 18.89, 18.93, 19.08,
                19.09, 19.16, 19.07, 19.2 , 19.35, 19.8 , 19.09, 18.75, 18.95,
                18.91, 18.98, 18.84, 18.85, 18.3 , 18.2 , 18.3 , 18.06, 18.09,
                18.14, 18.19, 18.21, 18.45, 18.39, 18.32, 18.19, 17.91, 17.75,
                17.75, 17.69, 17.73, 18.27, 18.48, 18.92, 19.46, 19.46, 19.46,
                19.46, 19.86, 19.17, 19.6 , 19.57, 19.48, 19.21, 19.43, 19.34,
                18.86, 18.73, 19.17, 19.16, 19.27, 19.44, 19.47, 19.59, 19.4 ,
                19.48, 19.39, 19.31, 19.16, 19.37, 19.29, 19.42
            ], dtype=np.float32)
        pvs_exp = np.array([
            1,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,
            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,
            0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
            0,  1
        ])
        # fmt: on
        np.testing.assert_array_almost_equal(low, low_exp, 2)
        np.testing.assert_array_almost_equal(high, high_exp, 2)
        np.testing.assert_array_equal(pvs_exp, pvs)

        bars = await Stock.get_bars(
            "002782.XSHE", 30, FrameType.MIN30, end=datetime.datetime(2022, 11, 22, 10)
        )

        _, high, pvs = adjust_close_at_pv(bars, 1)
        self.assertAlmostEqual(19.86, high[-1], 2)

    async def test_convex_score(self):
        bars = await Stock.get_bars(
            "000852.XSHG",
            70,
            FrameType.MIN30,
            end=datetime.datetime(2022, 11, 29, 10, 30),
        )

        scores = [
            0.34379747144583084,
            0.15108640438664112,
            -0.0658,
            -0.039947,
            -0.045484966701931424,
        ]

        for i, win in enumerate([5, 10, 20, 30, 60]):
            ma = moving_average(bars["close"], win)[-10:]
            score = convex_score(ma)
            self.assertAlmostEqual(scores[i], score, 3)

        # 下降为主
        bars = await Stock.get_bars(
            "000852.XSHG",
            70,
            FrameType.MIN30,
            end=datetime.datetime(2022, 11, 25, 11, 30),
        )

        scores = [
            -0.21809978225740267,
            -0.2383043915074906,
            -0.05683236651950412,
            -0.054795742034912116,
            -0.032579898834228516,
        ]
        # win = 30有交织
        for i, win in enumerate([5, 10, 20, 30, 60]):
            ma = moving_average(bars["close"], win)[-10:]
            score = convex_score(ma)
            self.assertAlmostEqual(scores[i], score, 3)

    async def test_convex_signal(self):
        bars = await Stock.get_bars(
            "002782.XSHE", 30, FrameType.MIN30, end=datetime.datetime(2022, 11, 24, 15)
        )

        # 信号为0的情况
        flag, scores = convex_signal(bars, ex_info=True)
        self.assertEqual(flag, 0)
        exp = [0.0, -0.25351905, 0.0]
        np.testing.assert_array_almost_equal(scores, exp, 3)

        bars = await Stock.get_bars(
            "600260.XSHG",
            30,
            FrameType.MIN30,
            end=datetime.datetime(2022, 11, 7, 11, 30),
        )

        flag, scores = convex_signal(bars, ex_info=True)
        self.assertEqual(flag, -2)
        exp = [-0.3847302, -0.28655756, -0.06202173]
        np.testing.assert_array_almost_equal(scores, exp, 3)

        bars = await Stock.get_bars(
            "600260.XSHG",
            30,
            FrameType.MIN30,
            end=datetime.datetime(2022, 11, 4, 13, 30),
        )

        flag, scores = convex_signal(bars, ex_info=True)
        self.assertEqual(flag, -1)

        exp = [-0.51798796, 0.40477039, -0.058275]
        np.testing.assert_array_almost_equal(scores, exp, 3)

        # 信号为1的情况
        bars = await Stock.get_bars(
            "600260.XSHG",
            30,
            FrameType.MIN30,
            end=datetime.datetime(2022, 11, 17, 10, 30),
        )

        flag, scores = convex_signal(bars, ex_info=True)
        self.assertEqual(flag, 1)

        exp = [0.58971222, 0.26562682, 0.24386732]
        np.testing.assert_array_almost_equal(scores, exp, 3)

    def test_high_upper_lead(self):
        data = np.array(
            [
                (
                    "2021-09-22T00:00:00",
                    7.07,
                    7.37,
                    6.99,
                    7.28,
                    3300964.0,
                    2.38010263e07,
                    2.345786,
                ),
                (
                    "2021-09-23T00:00:00",
                    7.29,
                    7.54,
                    7.29,
                    7.45,
                    3795683.0,
                    2.83042061e07,
                    2.345786,
                ),
                (
                    "2021-09-24T00:00:00",
                    7.44,
                    7.49,
                    7.27,
                    7.28,
                    2651947.0,
                    1.94727429e07,
                    2.345786,
                ),
                (
                    "2021-09-27T00:00:00",
                    7.27,
                    7.27,
                    7.04,
                    7.07,
                    2370363.0,
                    1.68565712e07,
                    2.345786,
                ),
                (
                    "2021-09-28T00:00:00",
                    7.12,
                    7.2,
                    7.08,
                    7.11,
                    1989187.0,
                    1.41880048e07,
                    2.345786,
                ),
                (
                    "2021-09-29T00:00:00",
                    7.06,
                    7.14,
                    6.97,
                    6.98,
                    1786377.0,
                    1.25820737e07,
                    2.345786,
                ),
                (
                    "2021-09-30T00:00:00",
                    6.98,
                    7.14,
                    6.98,
                    7.11,
                    1708300.0,
                    1.20581740e07,
                    2.345786,
                ),
                (
                    "2021-10-08T00:00:00",
                    7.21,
                    7.24,
                    7.13,
                    7.17,
                    2232635.0,
                    1.60622849e07,
                    2.345786,
                ),
                (
                    "2021-10-11T00:00:00",
                    7.16,
                    7.23,
                    7.13,
                    7.16,
                    1490700.0,
                    1.06929545e07,
                    2.345786,
                ),
                (
                    "2021-10-12T00:00:00",
                    7.16,
                    7.2,
                    7.05,
                    7.15,
                    1788301.0,
                    1.27408722e07,
                    2.345786,
                ),
                (
                    "2021-10-13T00:00:00",
                    7.14,
                    7.14,
                    6.85,
                    6.99,
                    2295200.0,
                    1.60157860e07,
                    2.345786,
                ),
                (
                    "2021-10-14T00:00:00",
                    7.02,
                    7.04,
                    6.89,
                    6.97,
                    1589456.0,
                    1.10659640e07,
                    2.345786,
                ),
                (
                    "2021-10-15T00:00:00",
                    6.98,
                    7.02,
                    6.93,
                    6.96,
                    900494.0,
                    6.26564400e06,
                    2.345786,
                ),
                (
                    "2021-10-18T00:00:00",
                    7.0,
                    7.08,
                    6.9,
                    7.05,
                    1240400.0,
                    8.65162600e06,
                    2.345786,
                ),
                (
                    "2021-10-19T00:00:00",
                    7.04,
                    7.1,
                    6.92,
                    6.99,
                    1244700.0,
                    8.72210500e06,
                    2.345786,
                ),
                (
                    "2021-10-20T00:00:00",
                    6.99,
                    7.02,
                    6.88,
                    6.9,
                    1225000.0,
                    8.49515600e06,
                    2.345786,
                ),
                (
                    "2021-10-21T00:00:00",
                    7.05,
                    7.06,
                    6.91,
                    6.92,
                    1256400.0,
                    8.76297600e06,
                    2.345786,
                ),
                (
                    "2021-10-22T00:00:00",
                    7.06,
                    7.58,
                    6.98,
                    7.16,
                    5667957.0,
                    4.11338617e07,
                    2.345786,
                ),
                (
                    "2021-10-25T00:00:00",
                    7.0,
                    7.09,
                    6.72,
                    6.98,
                    4118651.0,
                    2.85671769e07,
                    2.345786,
                ),
                (
                    "2021-10-26T00:00:00",
                    6.92,
                    6.97,
                    6.8,
                    6.81,
                    2019100.0,
                    1.38737570e07,
                    2.345786,
                ),
                (
                    "2021-10-27T00:00:00",
                    6.86,
                    6.86,
                    6.69,
                    6.71,
                    1549200.0,
                    1.04793540e07,
                    2.345786,
                ),
                (
                    "2021-10-28T00:00:00",
                    6.71,
                    6.8,
                    6.68,
                    6.75,
                    1160007.0,
                    7.81644149e06,
                    2.345786,
                ),
                (
                    "2021-10-29T00:00:00",
                    6.77,
                    6.82,
                    6.7,
                    6.81,
                    978701.0,
                    6.61061145e06,
                    2.345786,
                ),
                (
                    "2021-11-01T00:00:00",
                    6.8,
                    6.87,
                    6.76,
                    6.84,
                    1118101.0,
                    7.63035978e06,
                    2.345786,
                ),
                (
                    "2021-11-02T00:00:00",
                    6.84,
                    6.87,
                    6.75,
                    6.8,
                    1130600.0,
                    7.70201800e06,
                    2.345786,
                ),
                (
                    "2021-11-03T00:00:00",
                    6.8,
                    6.98,
                    6.76,
                    6.85,
                    1366987.0,
                    9.41372295e06,
                    2.345786,
                ),
                (
                    "2021-11-04T00:00:00",
                    6.85,
                    6.98,
                    6.82,
                    6.98,
                    1582503.0,
                    1.09377695e07,
                    2.345786,
                ),
                (
                    "2021-11-05T00:00:00",
                    7.02,
                    7.09,
                    6.95,
                    7.07,
                    1451261.0,
                    1.01761147e07,
                    2.345786,
                ),
                (
                    "2021-11-08T00:00:00",
                    7.1,
                    7.1,
                    7.01,
                    7.08,
                    1062021.0,
                    7.48949241e06,
                    2.345786,
                ),
                (
                    "2021-11-09T00:00:00",
                    7.1,
                    7.1,
                    7.03,
                    7.07,
                    870373.0,
                    6.14868879e06,
                    2.345786,
                ),
                (
                    "2021-11-10T00:00:00",
                    7.07,
                    7.08,
                    6.96,
                    7.04,
                    906313.0,
                    6.35761946e06,
                    2.345786,
                ),
                (
                    "2021-11-11T00:00:00",
                    7.04,
                    7.24,
                    7.0,
                    7.19,
                    2790297.0,
                    1.99999557e07,
                    2.345786,
                ),
                (
                    "2021-11-12T00:00:00",
                    7.16,
                    7.18,
                    7.01,
                    7.06,
                    1872153.0,
                    1.32485686e07,
                    2.345786,
                ),
                (
                    "2021-11-15T00:00:00",
                    7.06,
                    7.1,
                    7.01,
                    7.08,
                    1227400.0,
                    8.65439700e06,
                    2.345786,
                ),
                (
                    "2021-11-16T00:00:00",
                    7.09,
                    7.13,
                    6.98,
                    7.02,
                    1311690.0,
                    9.23469024e06,
                    2.345786,
                ),
                (
                    "2021-11-17T00:00:00",
                    7.02,
                    7.03,
                    6.97,
                    7.0,
                    1068301.0,
                    7.48021999e06,
                    2.345786,
                ),
                (
                    "2021-11-18T00:00:00",
                    7.0,
                    7.0,
                    6.88,
                    6.91,
                    1782650.0,
                    1.23716630e07,
                    2.345786,
                ),
                (
                    "2021-11-19T00:00:00",
                    6.91,
                    7.07,
                    6.89,
                    7.02,
                    1426146.0,
                    9.95756688e06,
                    2.345786,
                ),
                (
                    "2021-11-22T00:00:00",
                    7.03,
                    7.04,
                    6.96,
                    7.02,
                    1443774.0,
                    1.01063273e07,
                    2.345786,
                ),
                (
                    "2021-11-23T00:00:00",
                    7.02,
                    7.18,
                    6.98,
                    7.17,
                    1983932.0,
                    1.40551019e07,
                    2.345786,
                ),
                (
                    "2021-11-24T00:00:00",
                    7.15,
                    7.25,
                    7.09,
                    7.23,
                    1828417.0,
                    1.31238295e07,
                    2.345786,
                ),
                (
                    "2021-11-25T00:00:00",
                    7.3,
                    7.3,
                    7.18,
                    7.2,
                    1302467.0,
                    9.41567743e06,
                    2.345786,
                ),
                (
                    "2021-11-26T00:00:00",
                    7.22,
                    7.22,
                    7.09,
                    7.15,
                    1494184.0,
                    1.06752230e07,
                    2.345786,
                ),
                (
                    "2021-11-29T00:00:00",
                    7.09,
                    7.12,
                    7.05,
                    7.08,
                    1340280.0,
                    9.48266520e06,
                    2.345786,
                ),
                (
                    "2021-11-30T00:00:00",
                    7.1,
                    7.14,
                    7.06,
                    7.09,
                    1211050.0,
                    8.59710886e06,
                    2.345786,
                ),
                (
                    "2021-12-01T00:00:00",
                    7.09,
                    7.23,
                    7.05,
                    7.19,
                    2090715.0,
                    1.50038697e07,
                    2.345786,
                ),
                (
                    "2021-12-02T00:00:00",
                    7.17,
                    7.25,
                    7.14,
                    7.18,
                    1369950.0,
                    9.83565137e06,
                    2.345786,
                ),
                (
                    "2021-12-03T00:00:00",
                    7.21,
                    7.21,
                    7.08,
                    7.18,
                    1499273.0,
                    1.07097578e07,
                    2.345786,
                ),
                (
                    "2021-12-06T00:00:00",
                    7.21,
                    7.26,
                    7.11,
                    7.12,
                    1458680.0,
                    1.04309604e07,
                    2.345786,
                ),
                (
                    "2021-12-07T00:00:00",
                    7.25,
                    7.32,
                    7.13,
                    7.2,
                    2496619.0,
                    1.80079099e07,
                    2.345786,
                ),
                (
                    "2021-12-08T00:00:00",
                    7.15,
                    7.2,
                    7.12,
                    7.19,
                    1545094.0,
                    1.10483792e07,
                    2.345786,
                ),
                (
                    "2021-12-09T00:00:00",
                    7.16,
                    7.25,
                    7.16,
                    7.19,
                    2312501.0,
                    1.66563622e07,
                    2.345786,
                ),
                (
                    "2021-12-10T00:00:00",
                    7.15,
                    7.2,
                    7.13,
                    7.17,
                    1498003.0,
                    1.07296914e07,
                    2.345786,
                ),
                (
                    "2021-12-13T00:00:00",
                    7.17,
                    7.38,
                    7.12,
                    7.27,
                    3088158.0,
                    2.22787462e07,
                    2.345786,
                ),
                (
                    "2021-12-14T00:00:00",
                    7.27,
                    7.33,
                    7.18,
                    7.27,
                    2531040.0,
                    1.83123279e07,
                    2.345786,
                ),
                (
                    "2021-12-15T00:00:00",
                    7.25,
                    7.37,
                    7.21,
                    7.32,
                    3098530.0,
                    2.26711938e07,
                    2.345786,
                ),
                (
                    "2021-12-16T00:00:00",
                    7.32,
                    7.38,
                    7.23,
                    7.32,
                    1817736.0,
                    1.32538628e07,
                    2.345786,
                ),
                (
                    "2021-12-17T00:00:00",
                    7.32,
                    7.78,
                    7.26,
                    7.6,
                    7502571.0,
                    5.68149728e07,
                    2.345786,
                ),
                (
                    "2021-12-20T00:00:00",
                    7.6,
                    8.36,
                    7.52,
                    8.29,
                    23075436.0,
                    1.88432292e08,
                    2.345786,
                ),
                (
                    "2021-12-21T00:00:00",
                    8.02,
                    8.85,
                    7.92,
                    8.32,
                    27107393.0,
                    2.28332005e08,
                    2.345786,
                ),
            ],
            dtype=[
                ("frame", "<M8[s]"),
                ("open", "<f4"),
                ("high", "<f4"),
                ("low", "<f4"),
                ("close", "<f4"),
                ("volume", "<f8"),
                ("amount", "<f8"),
                ("factor", "<f4"),
            ],
        )
        actual = high_upper_lead(data)
        exp = True
        self.assertEqual(actual, exp)

    def test_last_wave(self):
        ts = np.array(
            [
                10.47999954,
                10.31000042,
                10.43000031,
                9.89999962,
                9.14999962,
                9.71000004,
                9.40999985,
                9.43999958,
                9.57999992,
                9.55000019,
                9.43999958,
                9.52000046,
                9.55000019,
                9.46000004,
                9.57999992,
                9.64999962,
                9.5,
                9.34000015,
                9.36999989,
                9.39000034,
                9.01000023,
                9.06000042,
                8.98999977,
                8.80000019,
                8.89999962,
                8.89999962,
                9.05000019,
                8.81999969,
                8.80000019,
                9.10000038,
                9.10999966,
                9.07999992,
                9.34000015,
                9.14000034,
                9.14000034,
                9.43000031,
                8.77999973,
                8.72999954,
                8.60000038,
                8.78999996,
                8.56999969,
                8.35000038,
                8.13000011,
                8.17000008,
                7.94000006,
                7.78000021,
                7.94999981,
                7.94000006,
                7.98999977,
                8.27999973,
                8.30000019,
                8.39999962,
                8.44999981,
                8.38000011,
                8.32999992,
                8.19999981,
                8.15999985,
                7.96999979,
                7.92000008,
                7.86999989,
            ]
        )
        actual = last_wave(ts, 60)
        exp = (8, -0.06863904577490099)
        self.assertEqual(actual[0], exp[0])
        np.testing.assert_array_almost_equal(actual[1], exp[1], 4)

    async def test_short_signal(self):
        code = "600260.XSHG"

        # 完全降性
        bars = await Stock.get_bars(
            code,
            120,
            FrameType.MIN30,
            end=tf.combine_time(datetime.date(2022, 11, 10), 13, 30),
        )

        actual = await short_signal(bars)
        exp = (-2, {"convex_scores": np.array([-0.46477849, -0.27217382, -0.15887269])})
        self.assertEqual(actual[0], exp[0])
        np.testing.assert_array_almost_equal(
            actual[1]["convex_scores"], exp[1]["convex_scores"], 4
        )

        # 半降性
        bars = await Stock.get_bars(
            code,
            120,
            FrameType.MIN30,
            end=tf.combine_time(datetime.date(2022, 11, 4), 11, 30),
        )

        actual = await short_signal(bars)
        exp = (-1, {"convex_scores": np.array([-0.7345689, 0.40111031, -0.04114376])})
        self.assertEqual(actual[0], exp[0])
        np.testing.assert_array_almost_equal(
            actual[1]["convex_scores"], exp[1]["convex_scores"], 4
        )

        # 长上影
        bars = await Stock.get_bars(
            code,
            120,
            FrameType.MIN30,
            end=tf.combine_time(datetime.date(2022, 11, 17), 10),
        )
        actual = await short_signal(bars)
        exp = (-1, {"top_rsi_dist": 0})

        self.assertEqual(actual[0], exp[0])
        self.assertEqual(actual[1]["top_rsi_dist"], exp[1]["top_rsi_dist"])

        # 穹顶压力
        bars = await Stock.get_bars(
            code,
            120,
            FrameType.MIN30,
            end=tf.combine_time(datetime.date(2022, 11, 7), 10),
        )
        actual = await short_signal(bars)
        exp = (-2, {"dom_pressure": 0.9, "win": 5, "dp_convex": -0.5936198979806573})

        self.assertEqual(actual[0], exp[0])
        self.assertAlmostEqual(actual[1]["dom_pressure"], exp[1]["dom_pressure"], 2)

    async def test_evaluate(self):
        code = "600260.XSHG"
        end = tf.combine_time(datetime.date(2022, 11, 17), 15)
        actual = await evaluate(code, end)
        exp = {
            29: {
                "fired_at": np.datetime64("2022-11-02T14:00:00"),
                "rsi": 38.82197454531255,
                "convex_scores": np.array([-0.3391134, 0.06092602, -0.12091887]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.05284557415651192,
            },
            43: {
                "fired_at": np.datetime64("2022-11-04T11:30:00"),
                "rsi": 61.493112076954596,
                "convex_scores": np.array([-0.7345689, 0.40111031, -0.04114376]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.020408143405366563,
            },
            44: {
                "fired_at": np.datetime64("2022-11-04T13:30:00"),
                "rsi": 61.49311207695458,
                "cause_reason": "dompressure",
                "dom_pressure": 0.9,
                "win": 5,
                "dp_convex": -0.517987962656492,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.02857140076751319,
            },
            48: {
                "fired_at": np.datetime64("2022-11-07T10:00:00"),
                "rsi": 31.93886855312234,
                "cause_reason": "dompressure",
                "dom_pressure": 0.9,
                "win": 5,
                "dp_convex": -0.5936198979806573,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.0083333250549108,
            },
            51: {
                "fired_at": np.datetime64("2022-11-07T11:30:00"),
                "rsi": 44.38312121102131,
                "convex_scores": np.array([-0.3847302, -0.28655756, -0.06202173]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.004149373488428698,
            },
            70: {
                "fired_at": np.datetime64("2022-11-09T14:30:00"),
                "rsi": 48.132566968195675,
                "convex_scores": np.array([-0.15377613, -0.25936329, 0.09582468]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.036585427313929775,
            },
            76: {
                "fired_at": np.datetime64("2022-11-10T13:30:00"),
                "rsi": 31.406644220760565,
                "convex_scores": np.array([-0.46477849, -0.27217382, -0.15887269]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.0125522887334657,
            },
            89: {
                "fired_at": np.datetime64("2022-11-14T10:30:00"),
                "rsi": 31.328398131275048,
                "convex_scores": np.array([-0.45685879, -0.2124245, -0.1406614]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.021097027312509398,
            },
            110: {
                "fired_at": np.datetime64("2022-11-16T14:30:00"),
                "rsi": 51.93022197670896,
                "convex_scores": np.array([-0.42937629, 0.10615752, -0.02649438]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.03797474976107851,
            },
            111: {
                "fired_at": np.datetime64("2022-11-16T15:00:00"),
                "rsi": 57.65337909773189,
                "convex_scores": np.array([-0.21877231, 0.0, -0.01059321]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.0336134117055904,
            },
            112: {
                "fired_at": np.datetime64("2022-11-17T10:00:00"),
                "rsi": 80.23903191295676,
                "cause_reason": "upper_line",
                "top_rsi_dist": 0,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.008130073421291018,
            },
        }
        self.assertEqual(len(actual), len(exp))
        actual_keys = set(actual.keys())
        exp_keys = set(exp.keys())
        diff = actual_keys.difference(exp_keys)
        self.assertEqual(len(diff), 0)

    async def test_plot_evaluate(self):
        code = "600260.XSHG"
        end = tf.combine_time(datetime.date(2022, 11, 17), 15)
        actual = await plot_evaluate(code, end)
        exp = {
            29: {
                "fired_at": np.datetime64("2022-11-02T14:00:00"),
                "rsi": 38.82197454531255,
                "convex_scores": np.array([-0.3391134, 0.06092602, -0.12091887]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.05284557415651192,
            },
            43: {
                "fired_at": np.datetime64("2022-11-04T11:30:00"),
                "rsi": 61.493112076954596,
                "convex_scores": np.array([-0.7345689, 0.40111031, -0.04114376]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.020408143405366563,
            },
            44: {
                "fired_at": np.datetime64("2022-11-04T13:30:00"),
                "rsi": 61.49311207695458,
                "cause_reason": "dompressure",
                "dom_pressure": 0.9,
                "win": 5,
                "dp_convex": -0.517987962656492,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.02857140076751319,
            },
            48: {
                "fired_at": np.datetime64("2022-11-07T10:00:00"),
                "rsi": 31.93886855312234,
                "cause_reason": "dompressure",
                "dom_pressure": 0.9,
                "win": 5,
                "dp_convex": -0.5936198979806573,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.0083333250549108,
            },
            51: {
                "fired_at": np.datetime64("2022-11-07T11:30:00"),
                "rsi": 44.38312121102131,
                "convex_scores": np.array([-0.3847302, -0.28655756, -0.06202173]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.004149373488428698,
            },
            70: {
                "fired_at": np.datetime64("2022-11-09T14:30:00"),
                "rsi": 48.132566968195675,
                "convex_scores": np.array([-0.15377613, -0.25936329, 0.09582468]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.036585427313929775,
            },
            76: {
                "fired_at": np.datetime64("2022-11-10T13:30:00"),
                "rsi": 31.406644220760565,
                "convex_scores": np.array([-0.46477849, -0.27217382, -0.15887269]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.0125522887334657,
            },
            89: {
                "fired_at": np.datetime64("2022-11-14T10:30:00"),
                "rsi": 31.328398131275048,
                "convex_scores": np.array([-0.45685879, -0.2124245, -0.1406614]),
                "cause_reason": "convex",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.021097027312509398,
            },
            110: {
                "fired_at": np.datetime64("2022-11-16T14:30:00"),
                "rsi": 51.93022197670896,
                "convex_scores": np.array([-0.42937629, 0.10615752, -0.02649438]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.03797474976107851,
            },
            111: {
                "fired_at": np.datetime64("2022-11-16T15:00:00"),
                "rsi": 57.65337909773189,
                "convex_scores": np.array([-0.21877231, 0.0, -0.01059321]),
                "cause_reason": "convex_remind",
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": -0.0336134117055904,
            },
            112: {
                "fired_at": np.datetime64("2022-11-17T10:00:00"),
                "rsi": 80.23903191295676,
                "cause_reason": "upper_line",
                "top_rsi_dist": 0,
                "end": datetime.datetime(2022, 11, 17, 15, 0),
                "profits": 0.008130073421291018,
            },
        }
        self.assertEqual(len(actual), len(exp))
        actual_keys = set(actual.keys())
        exp_keys = set(exp.keys())
        diff = actual_keys.difference(exp_keys)
        self.assertEqual(len(diff), 0)

    async def test_hrsi_upline_confirm(self):
        code = "600260.XSHG"
        end = tf.combine_time(datetime.date(2022, 11, 17), 15)
        bars = await Stock.get_bars(code, 60, FrameType.MIN30, end)
        actual = hrsi_upline_confirm(bars)
        exp = 7
        self.assertEqual(actual, exp)
