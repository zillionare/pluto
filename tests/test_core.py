import unittest
import numpy as np

from pluto.core import score
from unittest import mock
import datetime
import omicron


class CoreTest(unittest.IsolatedAsyncioTestCase):

    async def test_score(self):
        # 类型一：日线，检测当日未涨停
        code = "002380.XSHE"
        bars = np.array([('2022-07-15T00:00:00', 12.49, 12.56, 12.2 , 12.2 ,  8024077., 9.89049220e+07, 3.353773),
       ('2022-07-18T00:00:00', 12.58, 12.96, 12.46, 12.8 , 10895999., 1.39033790e+08, 3.353773),
       ('2022-07-19T00:00:00', 12.87, 13.34, 12.65, 13.23, 16645821., 2.17165421e+08, 3.353773),
       ('2022-07-20T00:00:00', 13.28, 13.28, 12.9 , 13.04,  9927421., 1.29080920e+08, 3.353773)],
      dtype=[('frame', '<M8[s]'), ('open', '<f4'), ('high', '<f4'), ('low', '<f4'), ('close', '<f4'), 
      ('volume', '<f8'), ('amount', '<f8'), ('factor', '<f4')])
        with mock.patch(
            "omicron.models.stock.Stock.trade_price_limit_flags",
            return_value=([False], [False]),
        ):
            actual = await score(bars, code, frametype='day')
            exp = (
                [0.04918036, 0.08442621, 0.06885247], [0.08442621], []
            )
            for i in range(3):
                np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型二： 日线，检测当日涨停
        code = "002380.XSHE"
        bars = np.array([('2022-06-09T00:00:00', 13.35, 13.35, 13.01, 13.35,  8613404., 1.14910770e+08, 3.342714),
       ('2022-06-10T00:00:00', 14.17, 14.69, 13.97, 14.69, 16849817., 2.43503344e+08, 3.342714),
       ('2022-06-13T00:00:00', 15.  , 16.16, 14.81, 16.16, 25108534., 3.92079273e+08, 3.342714),
       ('2022-06-14T00:00:00', 16.65, 17.37, 15.  , 16.24, 41124181., 6.74687061e+08, 3.342714)],
      dtype=[('frame', '<M8[s]'), ('open', '<f4'), ('high', '<f4'), ('low', '<f4'), ('close', '<f4'), 
      ('volume', '<f8'), ('amount', '<f8'), ('factor', '<f4')])
        with mock.patch(
            "omicron.models.stock.Stock.trade_price_limit_flags",
            return_value=([True], [False]),
        ):
            actual = await score(bars, code, frametype='day')
            exp = (
                [0.14043753, 0.14608325], [0.14608325], []
            )
            for i in range(3):
                np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型三： 30分钟线，检测时未涨停
        code = "002380.XSHE"
        with mock.patch(
        "omicron.tf.day_shift",
        side_effect=(datetime.date(2022, 7, 13), datetime.date(2022, 7, 14))
            ):
            with mock.patch(
            "omicron.models.stock.Stock.get_trade_price_limits",
            side_effect=([(datetime.date(2022, 7, 13), 1.3, 10.88)], 
                                    [(datetime.date(2022, 7, 14), 13.67, 11.19)])
                ):
                bars = np.array([('2022-07-13T11:30:00', 12.32, 12.44, 12.31, 12.39,  802700.,  9939067., 3.353773),
                ('2022-07-13T13:30:00', 12.4 , 12.5 , 12.33, 12.47, 1043900., 12983265., 3.353773),
                ('2022-07-13T14:00:00', 12.47, 12.48, 12.42, 12.43,  514900.,  6408176., 3.353773),
                ('2022-07-13T14:30:00', 12.43, 12.6 , 12.41, 12.45, 1136100., 14198468., 3.353773),
                ('2022-07-13T15:00:00', 12.45, 12.48, 12.42, 12.43, 1003400., 12485592., 3.353773),
                ('2022-07-14T10:00:00', 12.52, 13.14, 12.46, 12.92, 5904300., 75851763., 3.353773),
                ('2022-07-14T10:30:00', 12.93, 12.94, 12.8 , 12.86, 1535000., 19753274., 3.353773),
                ('2022-07-14T11:00:00', 12.87, 12.87, 12.77, 12.84,  551700.,  7073972., 3.353773),
                ('2022-07-14T11:30:00', 12.85, 12.86, 12.79, 12.82,  271000.,  3475846., 3.353773),
                ('2022-07-14T13:30:00', 12.83, 12.84, 12.77, 12.82,  493700.,  6318695., 3.353773),
                ('2022-07-14T14:00:00', 12.82, 12.82, 12.74, 12.77,  491000.,  6277095., 3.353773),
                ('2022-07-14T14:30:00', 12.77, 12.78, 12.58, 12.64,  786700.,  9967807., 3.353773),
                ('2022-07-14T15:00:00', 12.65, 12.69, 12.61, 12.65, 1007200., 12750028., 3.353773),
                ('2022-07-15T10:00:00', 12.49, 12.56, 12.34, 12.4 , 2545600., 31630911., 3.353773),
                ('2022-07-15T10:30:00', 12.41, 12.44, 12.31, 12.32, 1053400., 13012812., 3.353773),
                ('2022-07-15T11:00:00', 12.31, 12.34, 12.26, 12.28,  888500., 10924709., 3.353773),
                ('2022-07-15T11:30:00', 12.3 , 12.32, 12.2 , 12.31,  714900.,  8761878., 3.353773),
                ('2022-07-15T13:30:00', 12.32, 12.32, 12.24, 12.29,  476700.,  5850614., 3.353773),
                ('2022-07-15T14:00:00', 12.29, 12.3 , 12.22, 12.28,  627800.,  7698980., 3.353773),
                ('2022-07-15T14:30:00', 12.28, 12.29, 12.23, 12.26,  548200.,  6722689., 3.353773),
                ('2022-07-15T15:00:00', 12.25, 12.33, 12.2 , 12.2 , 1169000., 14302329., 3.353773),
                ('2022-07-18T10:00:00', 12.58, 12.95, 12.46, 12.78, 5389600., 68732486., 3.353773),
                ('2022-07-18T10:30:00', 12.78, 12.88, 12.66, 12.66, 1206900., 15399565., 3.353773),
                ('2022-07-18T11:00:00', 12.67, 12.73, 12.64, 12.69,  439500.,  5580426., 3.353773),
                ('2022-07-18T11:30:00', 12.69, 12.74, 12.68, 12.72,  295200.,  3751783., 3.353773),
                ('2022-07-18T13:30:00', 12.72, 12.79, 12.68, 12.7 ,  471000.,  5996444., 3.353773),
                ('2022-07-18T14:00:00', 12.7 , 12.8 , 12.68, 12.79,  529300.,  6739336., 3.353773),
                ('2022-07-18T14:30:00', 12.78, 12.86, 12.72, 12.84,  928200., 11859515., 3.353773),
                ('2022-07-18T15:00:00', 12.83, 12.86, 12.78, 12.8 , 1636300., 20974235., 3.353773),
                ('2022-07-19T10:00:00', 12.87, 13.  , 12.65, 12.92, 4197600., 54163142., 3.353773),
                ('2022-07-19T10:30:00', 12.92, 12.96, 12.8 , 12.84, 1291000., 16597255., 3.353773),
                ('2022-07-19T11:00:00', 12.83, 13.14, 12.82, 13.04, 2625800., 34222092., 3.353773),
                ('2022-07-19T11:30:00', 13.04, 13.13, 13.01, 13.04, 1150200., 15051945., 3.353773),
                ('2022-07-19T13:30:00', 13.05, 13.07, 12.94, 13.  ,  983000., 12781171., 3.353773),
                ('2022-07-19T14:00:00', 13.01, 13.31, 12.99, 13.17, 2679800., 35262736., 3.353773)],
                dtype=[('frame', '<M8[s]'), ('open', '<f4'), ('high', '<f4'), ('low', '<f4'), ('close', '<f4'), 
                ('volume', '<f8'), ('amount', '<f8'), ('factor', '<f4')])

                actual = await score(bars, code, frametype='min30')
                exp = (
                    [ 0.02098461, -0.01533499,  0.03309119], 
                    [0.03309119],
                    [-0.01533499]
                )
                for i in range(3):
                    np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)

        # 类型四： 30分钟线，检测时涨停
        with mock.patch(
            "omicron.models.stock.Stock.get_trade_price_limits",
            side_effect=([(datetime.date(2022, 10, 10), 14.32, 11.72)], 
                                    [(datetime.date(2022, 10, 11), 15.75, 12.89)])
                ):
            with mock.patch(
            "omicron.tf.day_shift",
            side_effect=(datetime.date(2022, 10, 10), datetime.date(2022, 10, 11))
                ):
                bars_ = np.array([('2022-10-10T10:00:00', 13.37, 14.32, 13.24, 14.32,  6187400., 8.63085590e+07, 3.353773),
                ('2022-10-10T10:30:00', 14.32, 14.32, 14.32, 14.32,   305700., 4.37762400e+06, 3.353773),
                ('2022-10-10T11:00:00', 14.32, 14.32, 14.32, 14.32,    99200., 1.42054400e+06, 3.353773),
                ('2022-10-10T11:30:00', 14.32, 14.32, 14.32, 14.32,    43000., 6.15760000e+05, 3.353773),
                ('2022-10-10T13:30:00', 14.32, 14.32, 14.32, 14.32,   100900., 1.44488800e+06, 3.353773),
                ('2022-10-10T14:00:00', 14.32, 14.32, 14.32, 14.32,    99700., 1.42770400e+06, 3.353773),
                ('2022-10-10T14:30:00', 14.32, 14.32, 14.32, 14.32,   268100., 3.83919200e+06, 3.353773),
                ('2022-10-10T15:00:00', 14.32, 14.32, 14.32, 14.32,   571600., 8.18501100e+06, 3.353773),
                ('2022-10-11T10:00:00', 14.9 , 15.17, 14.52, 14.65,  8425400., 1.24763053e+08, 3.353773),
                ('2022-10-11T10:30:00', 14.66, 15.  , 14.64, 14.69,  3357700., 4.96986620e+07, 3.353773),
                ('2022-10-11T11:00:00', 14.66, 14.9 , 14.54, 14.73,  1965200., 2.89275330e+07, 3.353773),
                ('2022-10-11T11:30:00', 14.74, 15.75, 14.6 , 15.75,  4985200., 7.65381320e+07, 3.353773),
                ('2022-10-11T13:30:00', 15.75, 15.75, 15.75, 15.75,  1041800., 1.64083500e+07, 3.353773),
                ('2022-10-11T14:00:00', 15.75, 15.75, 15.75, 15.75,  1466900., 2.31039740e+07, 3.353773),
                ('2022-10-11T14:30:00', 15.75, 15.75, 15.75, 15.75,  1537700., 2.42187750e+07, 3.353773),
                ('2022-10-11T15:00:00', 15.75, 15.75, 15.75, 15.75,   345400., 5.44005000e+06, 3.353773),
                ('2022-10-12T10:00:00', 16.18, 16.47, 15.51, 15.86, 19099600., 3.06769935e+08, 3.353773),
                ('2022-10-12T10:30:00', 15.88, 17.  , 15.76, 16.8 ,  7086500., 1.16071283e+08, 3.353773),
                ('2022-10-12T11:00:00', 16.81, 16.88, 16.31, 16.42,  2614400., 4.33098160e+07, 3.353773),
                ('2022-10-12T11:30:00', 16.42, 16.49, 16.23, 16.27,   905100., 1.48070050e+07, 3.353773),
                ('2022-10-12T13:30:00', 16.25, 16.25, 15.8 , 16.  ,  1400400., 2.24104100e+07, 3.353773),
                ('2022-10-12T14:00:00', 16.  , 17.33, 15.9 , 17.33,  5134700., 8.75839460e+07, 3.353773),
                ('2022-10-12T14:30:00', 17.33, 17.33, 17.33, 17.33,   526400., 9.12261600e+06, 3.353773),
                ('2022-10-12T15:00:00', 17.33, 17.33, 17.33, 17.33,   376500., 6.52474500e+06, 3.353773),
                ('2022-10-13T10:00:00', 17.6 , 19.06, 17.58, 19.06, 22189100., 4.07764112e+08, 3.353773),
                ('2022-10-13T10:30:00', 19.06, 19.06, 19.06, 19.06,  1835000., 3.49755380e+07, 3.353773),
                ('2022-10-13T11:00:00', 19.06, 19.06, 19.06, 19.06,   256400., 4.88698400e+06, 3.353773),
                ('2022-10-13T11:30:00', 19.06, 19.06, 19.06, 19.06,   140100., 2.66981100e+06, 3.353773),
                ('2022-10-13T13:30:00', 19.06, 19.06, 19.06, 19.06,   181200., 3.45367200e+06, 3.353773),
                ('2022-10-13T14:00:00', 19.06, 19.06, 19.06, 19.06,    91900., 1.75174700e+06, 3.353773),
                ('2022-10-13T14:30:00', 19.06, 19.06, 19.06, 19.06,   111300., 2.12137800e+06, 3.353773),
                ('2022-10-13T15:00:00', 19.06, 19.06, 19.06, 19.06,   301000., 5.73713600e+06, 3.353773),
                ('2022-10-14T10:00:00', 20.06, 20.97, 19.34, 20.01, 30942993., 6.31107987e+08, 3.353773),
                ('2022-10-14T10:30:00', 20.01, 20.17, 19.58, 19.96,  3284219., 6.53043860e+07, 3.353773),
                ('2022-10-14T11:00:00', 19.97, 20.86, 19.81, 20.75,  3359457., 6.85313790e+07, 3.353773),
                ('2022-10-14T11:30:00', 19.67, 19.67, 19.63, 19.63,   105000., 2.06305400e+06, 3.353773),
                ('2022-10-14T13:30:00', 19.7 , 20.73, 19.65, 20.51,  3051158., 6.10360510e+07, 3.353773),
                ('2022-10-14T14:00:00', 20.51, 20.51, 19.71, 19.78,  1736700., 3.48235070e+07, 3.353773),
                ('2022-10-14T14:30:00', 19.76, 19.93, 19.67, 19.68,  2321508., 4.58501780e+07, 3.353773),
                ('2022-10-14T15:00:00', 18.01, 18.01, 18.01, 18.01,  1274600., 2.29555460e+07, 3.353773)],
                dtype=[('frame', '<M8[s]'), ('open', '<f4'), ('high', '<f4'), ('low', '<f4'), ('close', '<f4'), 
                ('volume', '<f8'), ('amount', '<f8'), ('factor', '<f4')])
                actual = await score(bars_, code, frametype='min30')
                exp = (
                        [0.16308728, 0.27919462, 0.20872487], [0.27919462], []
                )
                for i in range(3):
                    np.testing.assert_array_almost_equal(actual[i], exp[i], decimal=3)


